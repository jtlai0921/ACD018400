/* 將現有的代碼體系轉換成新體系再彙整 */
CREATE TABLE PopTbl
(pref_name VARCHAR(32) PRIMARY KEY,
 population INTEGER NOT NULL);

INSERT INTO PopTbl VALUES('金門', 100);
INSERT INTO PopTbl VALUES('澎湖', 200);
INSERT INTO PopTbl VALUES('馬祖', 150);
INSERT INTO PopTbl VALUES('小琉球', 200);
INSERT INTO PopTbl VALUES('台中', 300);
INSERT INTO PopTbl VALUES('彰化', 100);
INSERT INTO PopTbl VALUES('雲林', 200);
INSERT INTO PopTbl VALUES('台北', 400);
INSERT INTO PopTbl VALUES('內壢', 50);


/* 以單一SQL完成不同條件的彙整 */
CREATE TABLE PopTbl2
(pref_name VARCHAR(32),
 sex CHAR(1) NOT NULL,
 population INTEGER NOT NULL,
    PRIMARY KEY(pref_name, sex));

INSERT INTO PopTbl2 VALUES('金門', '1', 60 );
INSERT INTO PopTbl2 VALUES('金門', '2', 40 );
INSERT INTO PopTbl2 VALUES('澎湖', '1', 100);
INSERT INTO PopTbl2 VALUES('澎湖', '2', 100);
INSERT INTO PopTbl2 VALUES('馬祖', '1', 100);
INSERT INTO PopTbl2 VALUES('馬祖', '2', 50 );
INSERT INTO PopTbl2 VALUES('小琉球', '1', 100);
INSERT INTO PopTbl2 VALUES('小琉球', '2', 100);
INSERT INTO PopTbl2 VALUES('台中', '1', 100);
INSERT INTO PopTbl2 VALUES('台中', '2', 200);
INSERT INTO PopTbl2 VALUES('彰化', '1', 20 );
INSERT INTO PopTbl2 VALUES('彰化', '2', 80 );
INSERT INTO PopTbl2 VALUES('雲林', '1', 125);
INSERT INTO PopTbl2 VALUES('雲林', '2', 125);
INSERT INTO PopTbl2 VALUES('台北', '1', 250);
INSERT INTO PopTbl2 VALUES('台北', '2', 150);


/* 以CHECK限制定義多個欄位的條件關係 */
CREATE TABLE TestSal
(sex CHAR(1) ,
 salary INTEGER,
    CONSTRAINT check_salary CHECK
             ( CASE WHEN sex = '2'
                    THEN CASE WHEN salary <= 200000
                              THEN 1 ELSE 0 END
                    ELSE 1 END = 1 ));

INSERT INTO TestSal VALUES(1, 200000);
INSERT INTO TestSal VALUES(1, 300000);
INSERT INTO TestSal VALUES(1, NULL);
INSERT INTO TestSal VALUES(2, 200000);
INSERT INTO TestSal VALUES(2, 300000);  --error
INSERT INTO TestSal VALUES(2, NULL);
INSERT INTO TestSal VALUES(1, 300000);


/* 讓條件產生分歧的UPDATE */
CREATE TABLE SomeTable
(p_key CHAR(1) PRIMARY KEY,
 col_1 INTEGER NOT NULL, 
 col_2 CHAR(2) NOT NULL);

INSERT INTO SomeTable VALUES('a', 1, '甲');
INSERT INTO SomeTable VALUES('b', 2, '乙');
INSERT INTO SomeTable VALUES('c', 3, '丙');


/* 資料表的比對 */
CREATE TABLE CourseMaster
(course_id   INTEGER PRIMARY KEY,
 course_name VARCHAR(32) NOT NULL);

INSERT INTO CourseMaster VALUES(1, '會計入門');
INSERT INTO CourseMaster VALUES(2, '財務知識');
INSERT INTO CourseMaster VALUES(3, '簿記檢定課程');
INSERT INTO CourseMaster VALUES(4, '稅務士');

CREATE TABLE OpenCourses
(month       INTEGER ,
 course_id   INTEGER ,
    PRIMARY KEY(month, course_id));

INSERT INTO OpenCourses VALUES(200706, 1);
INSERT INTO OpenCourses VALUES(200706, 3);
INSERT INTO OpenCourses VALUES(200706, 4);
INSERT INTO OpenCourses VALUES(200707, 4);
INSERT INTO OpenCourses VALUES(200708, 2);
INSERT INTO OpenCourses VALUES(200708, 4);


/* 於CASE敘述式使用彙總函數 */
CREATE TABLE StudentClub
(std_id  INTEGER,
 club_id INTEGER,
 club_name VARCHAR(32),
 main_club_flg CHAR(1),
 PRIMARY KEY (std_id, club_id));

INSERT INTO StudentClub VALUES(100, 1, '棒球',        'Y');
INSERT INTO StudentClub VALUES(100, 2, '吹奏樂器社',      'N');
INSERT INTO StudentClub VALUES(200, 2, '吹奏樂器社',      'N');
INSERT INTO StudentClub VALUES(200, 3, '羽毛球社','Y');
INSERT INTO StudentClub VALUES(200, 4, '足球社',    'N');
INSERT INTO StudentClub VALUES(300, 4, '足球社',    'N');
INSERT INTO StudentClub VALUES(400, 5, '游泳社',        'N');
INSERT INTO StudentClub VALUES(500, 6, '圍棋社',        'N');





SELECT CASE pref_name
          WHEN '金門' THEN '離島'
          WHEN '澎湖' THEN '離島'
          WHEN '馬祖' THEN '離島'
          WHEN '小琉球' THEN '離島'
          WHEN '台中' THEN '南部'
          WHEN '彰化' THEN '南部'
          WHEN '雲林' THEN '南部'
          ELSE '其他' END AS district,
       SUM(population)
  FROM PopTbl
 GROUP BY CASE pref_name
             WHEN '金門' THEN '離島'
             WHEN '澎湖' THEN '離島'
             WHEN '馬祖' THEN '離島'
             WHEN '小琉球' THEN '離島'
             WHEN '台中' THEN '南部'
             WHEN '彰化' THEN '南部'
             WHEN '雲林' THEN '南部'
             ELSE '其他' END;


--依照人口等級分類各縣
SELECT CASE WHEN population < 100 THEN '01'
            WHEN population >= 100 AND population < 200 THEN '02'
            WHEN population >= 200 AND population < 300 THEN '03'
            WHEN population >= 300 THEN '04'
            ELSE NULL END AS pop_class,
       COUNT(*) AS cnt
  FROM PopTbl
 GROUP BY CASE WHEN population < 100 THEN '01'
               WHEN population >= 100 AND population < 200 THEN '02'
               WHEN population >= 200 AND population < 300 THEN '03'
               WHEN population >= 300 THEN '04'
               ELSE NULL END;



--重新以地區分類代碼 其二2：將CASE敘述式寫在同一處
SELECT CASE pref_name
          WHEN '金門' THEN '離島'
          WHEN '澎湖' THEN '離島'
          WHEN '馬祖' THEN '離島'
          WHEN '小琉球' THEN '離島'
          WHEN '台中' THEN '南部'
          WHEN '彰化' THEN '南部'
          WHEN '雲林' THEN '南部'
          ELSE '其他' END AS district,
       SUM(population)
  FROM PopTbl
 GROUP BY district;


SELECT pref_name,
       population
  FROM PopTbl2
 WHERE sex = '1';


SELECT pref_name,
       population
  FROM PopTbl2
 WHERE sex = '2';


SELECT pref_name,
       --男性的人口
       SUM( CASE WHEN sex = '1' THEN population ELSE 0 END) AS cnt_m,
       --女性的人口
       SUM( CASE WHEN sex = '2' THEN population ELSE 0 END) AS cnt_f
  FROM PopTbl2
 GROUP BY pref_name;


SELECT pref_name,
       --男性的人口
       CASE WHEN sex = '1' THEN population ELSE 0 END AS cnt_m,
       --女性的人口
       CASE WHEN sex = '2' THEN population ELSE 0 END AS cnt_f
  FROM PopTbl2;


CONSTRAINT check_salary CHECK
   ( CASE WHEN sex = '2'
          THEN CASE WHEN salary <= 200000
                    THEN 1 ELSE 0 END
     ELSE 1 END = 1 )


CONSTRAINT check_salary CHECK
   ( sex = '2' AND salary <= 200000 )



--條件1
UPDATE Personnel
   SET salary = salary * 0.9
 WHERE salary >= 300000;


--條件2
UPDATE Personnel
   SET salary = salary * 1.2
 WHERE salary >= 250000 AND salary < 280000;



UPDATE Personnel
   SET salary = CASE WHEN salary >= 300000
                     THEN salary * 0.9
                     WHEN salary >= 250000 AND salary < 280000
                     THEN salary * 1.2
                ELSE salary END;


--1．a先換成代替的d
UPDATE SomeTable
   SET p_key = 'd'
 WHERE p_key = 'a';

--2．將b換成a
UPDATE SomeTable
   SET p_key = 'a'
 WHERE p_key = 'b';

--3．將d換成b
UPDATE SomeTable
   SET p_key = 'b'
 WHERE p_key = 'd';


--以CASE敘述式對調主索引值
UPDATE SomeTable
   SET p_key = CASE WHEN p_key = 'a'
                    THEN 'b'
                    WHEN p_key = 'b'
                    THEN 'a'
               ELSE p_key END
 WHERE p_key IN ('a', 'b');



--資料表的比對：使用IN述語
SELECT course_name,
       CASE WHEN course_id IN
                    (SELECT course_id FROM OpenCourses
                      WHERE month = 201806) THEN '○'
            ELSE '×' END AS "6 月",
       CASE WHEN course_id IN
                    (SELECT course_id FROM OpenCourses
                      WHERE month = 201807) THEN '○'
            ELSE '×' END AS "7 月",
       CASE WHEN course_id IN
                    (SELECT course_id FROM OpenCourses
                      WHERE month = 201808) THEN '○'
            ELSE '×' END AS "8 月"
  FROM CourseMaster;


--資料表的比對：使用EXISTS述語
SELECT CM.course_name,
       CASE WHEN EXISTS
                  (SELECT course_id FROM OpenCourses OC
                    WHERE month = 201806
                      AND OC.course_id = CM.course_id) THEN '○'
            ELSE '×' END AS "6 月",
       CASE WHEN EXISTS
                  (SELECT course_id FROM OpenCourses OC
                    WHERE month = 201807
                      AND OC.course_id = CM.course_id) THEN '○'
            ELSE '×' END AS "7 月",
       CASE WHEN EXISTS
                  (SELECT course_id FROM OpenCourses OC
                    WHERE month = 201808
                      AND OC.course_id = CM.course_id) THEN '○'
            ELSE '×' END AS "8 月"
  FROM CourseMaster CM;



--條件1：選擇只參加一個社團的學生
SELECT std_id, MAX(club_id) AS main_club
  FROM StudentClub
 GROUP BY std_id
HAVING COUNT(*) = 1;


--條件2：選擇參加多個社團的學生
SELECT std_id, club_id AS main_club
  FROM StudentClub
 WHERE main_club_flg = 'Y';


SELECT std_id,
       CASE WHEN COUNT(*) = 1 --學生只參加一個社團的情況
            THEN MAX(club_id)
            ELSE MAX(CASE WHEN main_club_flg = 'Y'
                          THEN club_id
                          ELSE NULL END) END AS main_club
  FROM StudentClub
 GROUP BY std_id;



